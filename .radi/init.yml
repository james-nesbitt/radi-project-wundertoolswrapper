- Type: File
  path: .radi/authorize.yml
  Contents: |2
    Rules:
    
      - Id: Default
        Operation: "*"
        Authorize: Allow
        
- Type: File
  path: .radi/tools/wundertools/client-docker-image.sh
  Contents: |2
    #!/bin/sh
    ##########
    #
    # Build the project source code:
    #   - build a docker image with web source
    #
    # Usage:
    #   --no-composer : don't run the composer part of the build (just build the image)
    #   --composer-update : run composer update instead of just composer install
    #   --no-image-build : don't build the docker image (just run composer)
    #   --push-image : docker push the image
    #
    
    echo "----------------------------------------------
    WunderTools -> Radi build handler
    "
    
    export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/app/bin:/app/vendor/bin:/app/.composer/vendor/bin"
    
    ##### Interpret arguments #####################################################
    
    sflag="-s"
    for arg in "$@"
    do
    	case "$arg" in
    
    	--run-buildsh)
    		echo " -> ENABLING BUILD.SH RUN"
    		RUN_BUILDSH="yes"
    		;;
    
    	--no-image-build)
    		echo " -> DISABLING DOCKER IMAGE BUILD"
    		RUN_IMAGEBUILD="no"
    		;;
    
    	--push-image)
    		echo " -> PUSHING DOCKER IMAGE BUILD"
    		RUN_IMAGEPUSH="yes"
    		;;
    
    	esac
    done
    
    echo " "
    
    ##### Some configurations #####################################################
    
    PROJECT="${PROJECT:-wundertools}"
    
    DOCKERREPO="${DOCKERREPO:-quay.io/}"
    IMAGEROOT="${IMAGEROOT:-wunder/project-}"
    [ -z "${IMAGENAME}" ] && IMAGENAME="${DOCKERREPO}${IMAGEROOT}${PROJECT}-source"
    
    PROJECTROOT="${PROJECTROOT:-/app/project}"
    [ -z "${DRUPALROOT}" ] && DRUPALROOT="${PROJECTROOT}/drupal"
    
    RUN_BUILDSH="${RUN_BUILDSH:-no}"
    RUN_IMAGEBUILD="${RUN_IMAGEBUILD:-yes}"
    RUN_IMAGEPUSH="${RUN_IMAGEPUSH:-no}"
    
    COMPOSER_COMMAND="${COMPOSER_COMMAND:-install}"
    
    ##### BUILD PROJECT SOURCE ####################################################
    
    if [ "${RUN_BUILDSH}" = "yes" ]; then
    
    	echo "----- Using build.sh generate full project source -----
    
    Now using the drupal/build.sh to generate source.
    
    Note that we have no need of generating source on the host, but we do 
    so in order to give local developers access to source code for code editor
    compatibility.
    
    	"
    
    	(
    		cd "${DRUPALROOT}"
    		./build.sh -c conf/site.radi.yml -o conf/commands.radi-initialize.yml new
    	)
    
    fi
    
    ##### BUILD SOURCE CODE IMAGE #################################################
    
    if [ "${RUN_IMAGEBUILD}" = "yes" ];then
    
    	echo "----- Building Docker image -----
    
    This command will now build a local docker image for source code
    using the Dockerfile in the drupal root
    
    Image: ${IMAGENAME}
    
    
    	"
    
    	# run the docker build
    	echo "--> building docker image for source code [production safe]"
    	(sudo docker build --tag "${IMAGENAME}" "${DRUPALROOT}")
    	echo "--> image build: ${IMAGENAME}"
    
    fi
    
    ##### PUSH IMAGE TO DOCKER REPOSITORY #########################################
    
    
    if [ "${RUN_IMAGEPUSH}" = "yes" ];then
    
    	echo "----- Pushing Docker image -----"
    
    	echo ">> Logging into docker repository: ${DOCKERREPO}"
    	sudo docker login "${DOCKERREPO}"
    
    	# run the docker build
    	(sudo docker push "${IMAGENAME}")
    	echo "--> image pushed: ${IMAGENAME}"
    
    fi
    
    echo ">> Build is finished"
        
- Type: File
  path: .radi/tools/wundertools/radify.sh
  Contents: |2
    #!/bin/bash
    #
    # WUNDERTOOLS : RADIFY
    #
    # This is a shell script that is meant to be used to convert an existing 
    # Wundertools D8 project into a radi compatible project.
    #
    # The process is meant to be non-destructive, and introduct minimal 
    # changes to the project source code.
    #
    # This script should be run in the root of a wundertools project.
    #
    
    # override the init_paths using cmd line variable
    [ -z "${INIT_PATHS}" ] && INIT_PATHS="https://raw.githubusercontent.com/wunderkraut/radi-project-wundertoolswrapper/master/.radi/init.yml"
    
    echo "##### RADIFY YOUR WUNDERTOOLS #####
    
    You are about to run a script that will add radi configuration and aids into 
    your existing project.
    
    This process is meant to radify an existing WUNDERTOOLS D8 project, with no 
    modifications to the actual project.  This script is however not very 
    sophisticated, so there is a chance that it will overwrite an existing file.
    
    #### How it works:
    
    The process is primarily template driven.
    
    The script will download some templates into your project, and ask some 
    questions. The answers to the questions asked may modify which templates are 
    used, but they are primarily used to provide string substitutions for the 
    templates, and to allow you to control what actions the script will take.
    
    This script should have been run/downloaded as: 
      https://github.com/wunderkraut/radi-project-wundertoolswrapper/blob/master/.radi/tools/wundertools/radify.sh
    
    #### Running radification
    
    We will now start the script
    
    Shall we proceed? (y/N)
    "
    read YNPROCEED
    case "$YNPROCEED" in
        [Yy]* )
    
    		echo " "
    		echo "Proceeding --->"
    		echo " "
    
    		;;
        *)
    		echo " "
    		echo "Aborting "
    		echo " "
    		exit 1	
    esac
    
    ### Some utility functions
    
    
    
    ### STARTING radification
    
    echo "##### Initial questions 
    
    Now we will ask a few questions to preconfigure the process
    
    "
    
    if [ -z "${PROJECT}" ]; then
    	echo "What is a good machine name for your project?
    
    	   This should be a lowercase string (no spaces numbers or symbols)
    
    	   This will be used as a template substitution variable, which will populate
    	   files used to configure radi for the project.  The result will also impact
    	   the docker-compose file, which will mean that all networks, volumes and 
    	   containers may contain this string as a root key value.
    	   "
    	read PROJECT 
    
    	echo " "
    fi
    if [ -z "${PORTBASE}" ]; then
    	echo "What is a good base port to use?
    
    	   This should be an integer like '80'
    
    	   This will be used as a base port which will be used for nginx & varnish 
    	   services, and mapped locally.
    
    	   If your base port is '80' then your services will be:
    
    	     - varnish : 8080
    	     - nginx   : 8081
    	   "
    	read PORTBASE 
    
    	echo " "
    fi
    
    echo "##### Processing init templates
    
    In this stage we will use one or more radi initialization templates to add files 
    to your project.
    We will download each template to a temporary file on your host, process it, and
    then run it.
    
    The current templates being 
    considered are: 
    ${INIT_PATHS}
    
    "
    
    for INITURL in $INIT_PATHS; do
    
    	TMPFILE="`mktemp`"
    
    	echo "INIT> ${INITURL} [temporarily in : ${TMPFILE}"
    
    	curl -s -o "${TMPFILE}" "${INITURL}"
    
    	echo "  --> replacing Project template variable"
    	sed -i -e "s/\%PROJECT\%/${PROJECT}/g" "${TMPFILE}"
    	echo "  --> replacing base-port template variable"
    	sed -i -e "s/\%PORTBASE\%/${PORTBASE}/g" "${TMPFILE}"
    
    	echo "  --> Running template init:"
    	(
    		# the environment flag only makes sense when the prject has already been radified once
    		# but it doesn't break the 1st time case.
    		radi --environment="initializer" local.project.create --project.create.source "${TMPFILE}"
    	)
    
    	rm "${TMPFILE}"
    
    done
    
    echo " 
    
    Initial radifcation complete
    
    ##### Project Preparation
    
    A few changes need to be made to your project source code in able to make it 
    compatible with docker and radi:
    "
    
    if [ -d "drupal/files" ]; then
    
    	echo "  --> making file folder group writeable "
    	chmod g+w "drupal/files"
    
    fi
    
    
    echo "
    ##### Finalization
    
    Now that the project initialization is complete, you should be able to run radi'
    as a command line tool anywhere inside your project.
    
    The first steps that you should perform, in order to be able to start using the
    the tool, are to perform the source code image build.
    You can do this at anytime using the build command (see .radi/commands.yml)
    
    $/> radi build
    
    The build creates a docker image with source code in it, that can be used in
    production, but can also be used locally with local source code bound in place.
    
    "
    
    echo "Would you like me to run the initial image build (probably 5 minutes build time)? (y/N)"
    read YNBUILD
    case "$YNBUILD" in
        [Yy]* )
    
    		echo " "
    		echo "Running build --->"
    		echo " "
    
    		(
    			radi --environment="initializer" initialize -- --run-buildsh
    		)
    
    		;;
    esac
        
- Type: File
  path: .radi/commands.yml
  Contents: |2
    
    # @NOTE Most of these require that you have project containers build and running
    
    # Give a ZSH tool shell with access to the project containers
    #
    shell:
      Description: Give a command shell, with access to the application
    
      tty: true
      image: quay.io/wunder/fuzzy-alpine-devshell
      hostname: "shell"
      working_dir: /app
      volumes_from:
        - source
        - assets
      volumes:
        - "!:/app/pwd"
        - "./:/app/project"
    
        - "~/.gitconfig:/app/.gitconfig:ro"
        - "~/.ssh:/app/.ssh:ro"
      links:
        - db:db.app
        - fpm:fpm.app
        - www:www.app
    
    build.sh:
      Description: Run the Drupal Build.sh
    
      image: quay.io/wunder/fuzzy-alpine-devshell
      hostname: "build"
      working_dir: /app/project/drupal
      environment:
        PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/app/bin:/app/vendor/bin:/app/.composer/vendor/bin"
      entrypoint:
        - ./build.sh
        - "--config=conf/site.radi.yml"
      volumes:
        - "./:/app/project"
    
        - "~/.gitconfig:/app/.gitconfig:ro"
        - "~/.ssh:/app/.ssh:ro"
      links:
        - db:db.app
    
    build-image:
      Description: Build the source code image
    
      privileged: true
      image: quay.io/wunder/fuzzy-alpine-devshell
      hostname: "build"
      working_dir: /app/project/
      environment:
        PROJECT: "%PROJECT%"
        PROJECTROOT: "/app/project"
        DOCKERREPO: "quay.io/"
      entrypoint:
        - /bin/zsh
        - /app/project/.radi/tools/wundertools/client-docker-image.sh
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    
        - "./:/app/project"
    
        - "~/.gitconfig:/app/.gitconfig:ro"
        - "~/.ssh:/app/.ssh:ro"
    
    # Drupal Console
    drupal:
      Description: Run drupal console on the application
    
      image: quay.io/wunder/fuzzy-alpine-devshell
      working_dir: /app/web
      entrypoint:
        - /app/vendor/bin/drupal
        - --ansi
      volumes_from:
        - source
        - assets
      volumes:
        - "./backup:/app/backup"
        # - "./settings/drush:/app/.drush"
        # - "./settings/drupal-console:/app/.drupal"
        - "./source/drupal/conf/composer.json:/app/.composer.json"
        - "./source/drupal/conf/composer.lock:/app/.composer.lock"
    
        - "~/.gitconfig:/app/.gitconfig:ro"
        - "~/.ssh:/app/.ssh:ro"
      links:
        - db:db.app
    
    # Drupal Console
    drush:
      Description: Run drush on the application
    
      tty: true
      image: quay.io/wunder/fuzzy-alpine-devshell
      working_dir: /app/web
      entrypoint:
        - /app/vendor/bin/drush
        - --ansi
      volumes_from:
        - source
        - assets
      volumes:
        - "./backup:/app/backup"
        # - "./settings/drush:/app/.drush"
    
        - "~/.gitconfig:/app/.gitconfig:ro"
        - "~/.ssh:/app/.ssh:ro"
      links:
        - db:db.app
        
- Type: File
  path: .radi/environments/initializer/project.yml
  Contents: |2
    Components:
    
      # Base implmentation is a local project
      - Type: local
        Implementations:
          - config
          - setting
          - command
          - project
          - security
        
- Type: File
  path: .radi/environments/initializer/commands.yml
  Contents: |2
    initialize:
      Description: Initialize the application as a WT wrapped RADI app
    
      privileged: true
      description: Build the source code image
      image: quay.io/wunder/fuzzy-alpine-devshell
      hostname: "build"
      working_dir: /app/project/
      environment:
        PROJECT: "%PROJECT%"
        PROJECTROOT: "/app/project"
        DOCKERREPO: "quay.io/"
      entrypoint:
        - /bin/zsh
        - /app/project/.radi/tools/wundertools/client-docker-image.sh
        - --run-buildsh
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    
        - "./:/app/project"
    
        - "~/.gitconfig:/app/.gitconfig:ro"
        - "~/.ssh:/app/.ssh:ro"
    
    build-source:
      Description: Build the WT application source code
    
      image: quay.io/wunder/fuzzy-alpine-devshell
      hostname: "build"
      working_dir: /app/project/
      environment:
        PROJECT: "%PROJECT%"
        PROJECTROOT: "/app/project"
        DOCKERREPO: "quay.io/"
      entrypoint:
        - /bin/zsh
        - /app/project/.radi/tools/wundertools/client-docker-image.sh
        - --run-buildsh
        - --no-image-build
      volumes:
        - "./:/app/project"
    
        - "~/.gitconfig:/app/.gitconfig:ro"
        - "~/.ssh:/app/.ssh:ro"
    
    build-image:
      Description: Build the source code image
    
      privileged: true
      image: quay.io/wunder/fuzzy-alpine-devshell
      hostname: "build"
      working_dir: /app/project/
      environment:
        PROJECT: "%PROJECT%"
        PROJECTROOT: "/app/project"
        DOCKERREPO: "quay.io/"
      entrypoint:
        - /bin/zsh
        - /app/project/.radi/tools/wundertools/client-docker-image.sh
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    
        - "./:/app/project"
    
        - "~/.gitconfig:/app/.gitconfig:ro"
        - "~/.ssh:/app/.ssh:ro"
    
    build.sh:
      Description: Run the Drupal Build.sh
    
      image: quay.io/wunder/fuzzy-alpine-devshell
      hostname: "build"
      working_dir: /app/project/drupal
      environment:
        PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/app/bin:/app/vendor/bin:/app/.composer/vendor/bin"
      entrypoint:
        - ./build.sh
        - "--config=conf/site.radi.yml"
        - "--commands=conf/commands.radi-initialize.yml"
      volumes:
        - "./:/app/project"
    
        - "~/.gitconfig:/app/.gitconfig:ro"
        - "~/.ssh:/app/.ssh:ro"
    
    # Override other commands to disable them
    
    shell:
      Internal: true
    drupal:
      Internal: true
    drush:
      Internal: true
        
- Type: File
  path: .radi/settings.yml
  Contents: |2
    Project: "%PROJECT%"
        
- Type: File
  path: .radi/project.yml
  Contents: |2
    Components:
    
      # Base implmentation is a local project
      - Type: local
        Implementations:
          - config
          - setting
          - security
    
      # Also use the local API for commands and orchestration
      - Type: local
        Implementations:
          - orchestrate
          - command
        
- Type: File
  path: drupal/conf/radi.services.yml
  Contents: |2
    # Local development services.
    #
    # @NOTE these are copied from development.services.yml
    #
    # To activate this feature, follow the instructions at the top of the
    # 'example.settings.local.php' file, which sits next to this file.
    services:
      cache.backend.null:
        class: Drupal\Core\Cache\NullBackendFactory
        
- Type: File
  path: drupal/conf/commands.radi-initialize.yml
  Contents: |2
    
    # Basic new site functionality when run using radi in initialize stage
    #
    # Copied from default commands, but removed any permissions changes (not needed)
    # and any database actions (db won't be avialable yet)
    #
    # This commands yml is only used by radi when it does the first initialization
    # and creates a web source before the DB is ready.  It is only needed because the
    # default "new" expects a DB connection
    #
    new:
      - make
      - backup
      - finalize
      - cleanup
        
- Type: File
  path: drupal/conf/radi.settings.php
  Contents: |2
    <?php
    
    /**
     * INSTALLATION SETTINGS
     *
     * You will want to comment these out if you need to install again
     */
    
    $databases = array (
      'default' => 
      array (
        'default' => 
        array (
          'database' => 'app',
          'username' => 'app',
          'password' => 'app',
          'host'     => 'db.app',
          'port'     => '',
          'driver'   => 'mysql',
          'prefix'   => '',
        ),
      ),
    );
    
    // We assume that you performed a standard or config-import install
    $settings['install_profile'] = 'standard';
    
    // We assume that the sync folder is mounted at /app/config
    $config_directories['sync'] = '/app/config';
    
    /**
     * General settings for developers
     */
    
    // Use this to get rid of those warnings
    // $settings['trusted_host_patterns'] = array(
    //   '\.docker$',
    // );
    
    $settings['file_temporary_path'] = '/tmp';
    
    /**
     * Assertions.
     *
     * The Drupal project primarily uses runtime assertions to enforce the
     * expectations of the API by failing when incorrect calls are made by code
     * under development.
     *
     * @see http://php.net/assert
     * @see https://www.drupal.org/node/2492225
     *
     * If you are using PHP 7.0 it is strongly recommended that you set
     * zend.assertions=1 in the PHP.ini file (It cannot be changed from .htaccess
     * or runtime) on development machines and to 0 in production.
     *
     * @see https://wiki.php.net/rfc/expectations
     */
    assert_options(ASSERT_ACTIVE, TRUE);
    \Drupal\Component\Assertion\Handle::register();
    
    /**
     * Enable local development services.
     */
    if (file_exists(__DIR__.'/local.services.yml')) {
      $settings['container_yamls'][] = __DIR__.'/local.services.yml';
    }
    
    /**
     * Show all error messages, with backtrace information.
     *
     * In case the error level could not be fetched from the database, as for
     * example the database connection failed, we rely only on this value.
     */
    $config['system.logging']['error_level'] = 'verbose';
    
    /**
     * Disable CSS and JS aggregation.
     */
    $config['system.performance']['css']['preprocess'] = FALSE;
    $config['system.performance']['js']['preprocess'] = FALSE;
    
    /**
     * Disable some caching if needed.
     */
    //$settings['cache']['bins']['default'] = 'cache.backend.null';
    //$settings['cache']['bins']['render'] = 'cache.backend.null';
    //$settings['cache']['bins']['dynamic_page_cache'] = 'cache.backend.null';
    
    /**
     * Allow test modules and themes to be installed.
     */
    $settings['extension_discovery_scan_tests'] = TRUE;
    
    /**
     * Enable access to rebuild.php.
     */
    $settings['rebuild_access'] = TRUE;
    
    /**
     * Skip file system permissions hardening.
     */
    $settings['skip_permissions_hardening'] = TRUE;
        
        
- Type: File
  path: drupal/conf/site.radi.yml
  Contents: |2
    ---
    # Site.yml for use with radi
    
    default:
    
      type: composer
    
      temporary: _build
    
      # Specify Drupal version
      drupal_version: d8
    
      # The final produced Drupal installation
      final: current
    
      # The Subpath of "final" and "temporary" where drupal resides.
      drupal_subpath: /web
      # Directory which will house all the previous builds
      previous: builds
    
      # Installation profile to use
      profile: config_installer
    
      # Site name given at installation phase
      site: "%PROJECT%"
    
      #
      # Copy in all the needed code.
      #
      # @NOTE: docker doesn't need this, we just do it because
      #   build.sh needs it, primarily to make sure that the
      #   container paths are created when it does it's composer
      #   build.
      # @NOTE we use copy instead of link in order to make the
      #   paths work well with docker volume mounting (sym-links
      #   produce files, and we need folders.)  Ignore the static
      #   files and folders in there for now, as our docker-compose
      #   will mount the /drupal/code/X into running containers.
      #
      copy:
        - conf/composer.json: composer.json
        - conf/composer.lock: composer.lock     
        - conf/services.yml: web/sites/default/services.yml
        - conf/settings.php: web/sites/default/settings.php
        - conf/radi.settings.php: web/sites/default/settings.local.php
        - conf/radi.services.yml: web/sites/default/services.local.yml
        - files: web/sites/default/files
        - code/modules/custom: web/modules/custom
        - code/themes/custom: web/themes/custom
        # - code/profiles/custom: web/profiles/custom
        # - code/libraries/custom: web/libraries/custom
        - sync: sync
        - conf/_ping.php: web/_ping.php
        
- Type: File
  path: drupal/Dockerfile
  Contents: |2
    # Wundertools Wrapper Docker build file
    #
    # This build expects:
    #   1. this docker build should be run after a composer install has been used to retrieve vendor/build www
    #   2. docker build using this file should be executed from the project source drupal root
    #
    FROM quay.io/wunder/fuzzy-alpine-base:v3.4
    MAINTAINER james.nesbitt@wunder.io
    
    USER app
    
    # Add core source
    ADD current/web /app/web
    ADD current/vendor /app/vendor
    
    # clear out the space for custom code
    # WT users like to symlink this stuff in, but for us sym-links
    # are files, and we need to map folders.
    # we also have to fix some of the permissions changes that build.sh
    # has applied.
    USER root
    RUN chown -R app:app /app/web && \
    	rm -rf /app/web/modules/custom && \
    	rm -rf /app/web/themes/custom && \
    	rm -rf /app/web/profiles/custom && \
    	rm -rf /app/web/libraries/custom && \
    	rm -rf /app/config
    USER app
    RUN mkdir -p /app/web/modules/custom && \
    	mkdir -p /app/web/themes/custom && \
    	mkdir -p /app/web/profiles/custom && \
    	mkdir -p /app/web/libraries/custom && \
    	mkdir -p /app/config && \
    	mkdir -p /app/.drush
    
    # Add project code and conf
    ADD code/modules/custom /app/web/modules/custom
    ADD code/themes/custom /app/web/themes/custom
    #ADD code/profiles/custom /app/web/profiles/custom
    #ADD code/libraries/custom /app/web/libraries/custom
    
    # Now it appears that drupal console wants to see composer files.
    ADD conf/composer.json /app/composer.json
    ADD conf/composer.lock /app/composer.lock
    
    # Add in Drupal config
    ADD sync /app/config
    
    # Add Drupal site settings
    ADD conf/services.yml /app/web/sites/default/services.yml
    ADD conf/settings.php /app/web/sites/default/settings.php
    ADD conf/radi.settings.php /app/web/sites/default/settings.local.php
    ADD conf/radi.services.yml /app/web/sites/default/services.local.yml
    ADD conf/wundertools.aliases.drushrc.php /app/.drush/wundertools.aliases.drushrc.php
        
- Type: File
  path: drupal/site.radi.yml
  Contents: |2
    ---
    # Site.yml for use with radi
    
    default:
    
      type: composer
    
      temporary: _build
    
      # Specify Drupal version
      drupal_version: d8
    
      # The final produced Drupal installation
      final: current
    
      # The Subpath of "final" and "temporary" where drupal resides.
      drupal_subpath: /web
      # Directory which will house all the previous builds
      previous: builds
    
      # Installation profile to use
      profile: config_installer
    
      # Site name given at installation phase
      site: %PROJECT%
    
      #
      # Copy in all the needed code.
      #
      # @NOTE: docker doesn't need this, we just do it because
      #   build.sh needs it, primarily to make sure that the
      #   container paths are created when it does it's composer
      #   build.
      # @NOTE we use copy instead of link in order to make the
      #   paths work well with docker volume mounting (sym-links
      #   produce files, and we need folders.)  Ignore the static
      #   files and folders in there for now, as our docker-compose
      #   will mount the /drupal/code/X into running containers.
      #
      copy:
        - conf/composer.json: composer.json
        - conf/composer.lock: composer.lock     
        - conf/services.yml: web/sites/default/services.yml
        - conf/settings.php: web/sites/default/settings.php
        - conf/radi.settings.php: web/sites/default/settings.local.php
        - conf/radi.services.yml: web/sites/default/services.local.yml
        - files: web/sites/default/files
        - code/modules/custom: web/modules/custom
        - code/themes/custom: web/themes/custom
        - sync: sync
        - conf/_ping.php: web/_ping.php
        
        
- Type: File
  path: docker-compose.yml
  Contents: |2
    
    version: "2"
    
    services:
    
      source:
        image: quay.io/wunder/fuzzy-alpine-base
        command:
          - /bin/true
        volumes:
          # bind in the web and vendor in case the dev makes changes
          - "./drupal/current/web:/app/web"
          - "./drupal/current/vendor:/app/vendor"
          # override local source.
          - "./drupal/sync:/app/config"
          - "./drupal/code/modules/custom:/app/web/modules/custom"
          - "./drupal/code/themes/custom:/app/web/themes/custom"
          # - "./drupal/code/profiles/custom:/app/web/profiles/custom"
          # - "./drupal/code/libraries/custom:/app/web/libraries/custom"
    
      assets:
        image: quay.io/wunder/fuzzy-alpine-base
        command:
          - /bin/true
        volumes:
          # Keep assets outside of the image, you could map these to
          # local paths if you want to keep assets locally.
          - "/app/web/sites/default/files"
          #- "/app/private"
    
      ####
      # Servers
      #
    
      ####
      # DB node
      #
      db:
        image: quay.io/wunder/fuzzy-alpine-mariadb
    
      ####
      # MemCacheD
      #
      memcache:
        image: quay.io/wunder/fuzzy-alpine-memcached
    
      ####
      # FPM node
      #
      # @NOTE in production, the source volumes should be source:ro
      #  but local devs may need to write to settings.php
    
      fpm:
        image: quay.io/wunder/fuzzy-alpine-php-dev
        volumes_from:
          - source
          - assets
        environment:
          DNSDOCK_ALIAS: fpm.%PROJECT%.docker
        links:
          - db:db.app
          - memcache:memcached.app
    
      ####
      # WWW node
      #
      www:
        image: quay.io/wunder/fuzzy-alpine-nginx-pagespeed-drupal
        ports:
          - "%PORTBASE%81:80"
        volumes_from:
          - source
          - assets
        environment:
          DNSDOCK_ALIAS: www.%PROJECT%.docker
        links:
          - fpm:fpm.app
    
      ####
      # Static cache service
      #
      varnish:
        image: quay.io/wunder/fuzzy-alpine-varnish
        ports:
          - "%PORTBASE%80:80"
        environment:
          DNSDOCK_ALIAS: %PROJECT%.docker
          VARNISH_BACKEND_HOST: backend.app
        links:
          - www:backend.app
        
